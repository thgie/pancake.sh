#!/bin/sh

# setup parameters
UPDATE=false

while getopts i:o:t:b:u: flag
do
    case "${flag}" in
        i) INPUT_DIR=${OPTARG};;
        o) OUTPUT_DIR=${OPTARG};;
        t) TEMPLATE_FILE=${OPTARG};;
        b) BIBTEXT_FILE=${OPTARG};;
        u) UPDATE=false;;
    esac
done

if [ "$UPDATE" = true ] ; then
  echo "Deploying changed files …"
else
  echo "Deploying all files…"
fi

NOW=$(date)
MAIN_BRANCH="main"
DEPLOY_BRANCH="pages"

# resize images, can be commented out…
# i just don't want huge images in my repo
# echo "resizing images"
# find "$INPUT_DIR" -type f \( -name \*.jpg -o -name \*.jpeg -o -name \*.png \) -exec mogrify -resize 1280x1280 -auto-orient {} \;

# backup current status to main branch
# this is important for the update action as it depends on reading the last commit
echo "Backing up current branch"

# move generated files to "pages" branch of INPUT_DIR repository and commit
git -C "$INPUT_DIR" switch "$MAIN_BRANCH"
git -C "$INPUT_DIR" add .
git -C "$INPUT_DIR" commit -m "backup $NOW"
git -C "$INPUT_DIR" push

# Rendering
echo "Rendering…"
rm -rfv "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"

if [ "$UPDATE" = true ] ; then
	git -C "$INPUT_DIR" diff-tree -r --name-only --no-commit-id HEAD@{1} HEAD | grep -E '.md' | while read file ; do
		INPUT_FILE="${file#\"}"

		# prepare relative output file path w/o extension
		OUTPUT_RELATIVE=${INPUT_FILE%.*}
		
		# render the file
		. ./render
	done
else
	find "$INPUT_DIR" -name "*.md" | while read file ; do

		# prepare input file string
		INPUT_FILE="${file/"$INPUT_DIR"/}"

		# prepare relative output file path w/o extension
		OUTPUT_RELATIVE="${file/"$INPUT_DIR"/}"
		OUTPUT_RELATIVE=${OUTPUT_RELATIVE%.*}

		# render the file
		. ./render
	done
fi


# sync files and prepare images for hosting 
# sync files to output dir
echo "Syncing assets"
if [ "$UPDATE" = true ] ; then
    # TODO enable subfolders
    mkdir "${OUTPUT_DIR}assets"
    git -C "$INPUT_DIR" diff-tree -r --name-only --no-commit-id HEAD@{1} HEAD | grep 'assets' | while read file ; do
		cp "${INPUT_DIR}${file}" "${OUTPUT_DIR}${file}"
	done
else
    rsync -au "${INPUT_DIR}assets/" "${OUTPUT_DIR}assets"
fi

# resizes and dithers copied images
# find "$OUTPUT_DIR" -type f \( -name \*.png \) -exec mogrify -resize 640x -dither FloydSteinberg -colors 32 -format png -auto-orient {} \;
# find "$OUTPUT_DIR" -type f \( -name \*.jpg -o -name \*.jpeg \) -exec mogrify -resize 640x -dither FloydSteinberg -colors 32 -format png -auto-orient {} \; -exec rm {} \;

# TODO the fuck is this?
find "$OUTPUT_DIR" -type f -name '*.html-e' -delete

# move generated files to "pages" branch of INPUT_DIR repository and commit
echo "Deploying to pages branch"
git -C "$INPUT_DIR" switch "$DEPLOY_BRANCH"
if [ "$UPDATE" = true ] ; then
    rsync -a --exclude=".*" "${OUTPUT_DIR}/" "${INPUT_DIR}/"
else
    rsync -a --delete --exclude=".*" "${OUTPUT_DIR}/" "${INPUT_DIR}/"
fi
git -C "$INPUT_DIR" add .
git -C "$INPUT_DIR" commit -m "generated $NOW"
git -C "$INPUT_DIR" push

git -C "$INPUT_DIR" switch "$MAIN_BRANCH"

# cleanup
echo "Removing temporary directory"
rm -rf "$OUTPUT_DIR"

echo "Finished deployment"
